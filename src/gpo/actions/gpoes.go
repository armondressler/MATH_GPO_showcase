package actions

import (
	"fmt"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v6"
	"github.com/gobuffalo/x/responder"
	"github.com/pkg/errors"

	"gpo/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Gpo)
// DB Table: Plural (gpoes)
// Resource: Plural (Gpoes)
// Path: Plural (/gpoes)
// View Template Folder: Plural (/templates/gpoes/)

// GpoesResource is the resource for the Gpo model
type GpoesResource struct {
	buffalo.Resource
}

// List gets all Gpoes. This function is mapped to the path
// GET /gpoes
func (v GpoesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	gpoes := &models.Gpoes{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Gpoes from the DB
	if err := q.All(gpoes); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("gpoes", gpoes)
		return c.Render(http.StatusOK, r.HTML("gpoes/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(gpoes))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(gpoes))
	}).Respond(c)
}

// Show gets the data for one Gpo. This function is mapped to
// the path GET /gpoes/{gpo_id}
func (v GpoesResource) Show(c buffalo.Context) error {

	err := setGpo(c)
	if err != nil {
		return errors.WithStack(err)
	}

	err = setCompany(c)
	if err != nil {
		return errors.WithStack(err)
	}

	gpo := c.Value("gpo")
	addBreadcrumbs(c)

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("gpo", gpo)

		return c.Render(http.StatusOK, r.HTML("gpoes/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(gpo))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(gpo))
	}).Respond(c)
}

// New renders the form for creating a new Gpo.
// This function is mapped to the path GET /gpoes/new
func (v GpoesResource) New(c buffalo.Context) error {
	c.Set("gpo", &models.Gpo{})

	return c.Render(http.StatusOK, r.HTML("gpoes/new.plush.html"))
}

// Create adds a Gpo to the DB. This function is mapped to the
// path POST /gpoes
func (v GpoesResource) Create(c buffalo.Context) error {
	// Allocate an empty Gpo
	gpo := &models.Gpo{}

	// Bind gpo to the html form elements
	if err := c.Bind(gpo); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(gpo)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("gpo", gpo)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("gpoes/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "gpo.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/gpoes/%v", gpo.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(gpo))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(gpo))
	}).Respond(c)
}

// Edit renders a edit form for a Gpo. This function is
// mapped to the path GET /gpoes/{gpo_id}/edit
func (v GpoesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Gpo
	gpo := &models.Gpo{}

	if err := tx.Find(gpo, c.Param("gpo_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	c.Set("gpo", gpo)
	return c.Render(http.StatusOK, r.HTML("gpoes/edit.plush.html"))
}

// Update changes a Gpo in the DB. This function is mapped to
// the path PUT /gpoes/{gpo_id}
func (v GpoesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Gpo
	gpo := &models.Gpo{}

	if err := tx.Find(gpo, c.Param("gpo_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Gpo to the html form elements
	if err := c.Bind(gpo); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(gpo)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("gpo", gpo)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("gpoes/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "gpo.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/gpoes/%v", gpo.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(gpo))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(gpo))
	}).Respond(c)
}

// Destroy deletes a Gpo from the DB. This function is mapped
// to the path DELETE /gpoes/{gpo_id}
func (v GpoesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Gpo
	gpo := &models.Gpo{}

	// To find the Gpo the parameter gpo_id is used.
	if err := tx.Find(gpo, c.Param("gpo_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(gpo); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "gpo.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/gpoes")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(gpo))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(gpo))
	}).Respond(c)
}
